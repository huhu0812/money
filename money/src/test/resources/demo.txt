package com.algorithm.hash;

import java.util.ArrayList;
import java.util.List;

//遗传算法
public class GA {
	//男人是奇数，女人是偶数
	List<human>  manPop = new ArrayList<human>();
	List<human>  womanPop = new ArrayList<human>();
	double Pm = 0.25; //变异发生的概率
	int score = 100;
	public GA(human man ,human woman){
		manPop.add(man);
		womanPop.add(woman);
	}

	//种群（Population）
	public Boolean Population(){

		int num = manPop.size()<womanPop.size()?manPop.size():womanPop.size();

		for(int i = 0; i < num;i++){
			
			boby(manPop.get(i),womanPop.get(i));
		}
		//适者生存，淘汰最差的
		manPop = Fitness(manPop);
		womanPop = Fitness(womanPop);
		//得到需要的后代后停止
		if(check(manPop)||check(womanPop)){
			return true;
		}else{
			return false;
		}
	}
	
	private void boby(human m,human w){
		//染色体分裂
		split(m);
		split(w);

		//组合
		human newhuman = new human(m.getA() + w.getA());
		if( newhuman.getNum() % 2 != 0){//产生的是男人，放到男人种群
			manPop.add(newhuman);
		}else{                         //产生的是女人，放到女人种群
			womanPop.add(newhuman);
		}
		newhuman = new human(m.getA() + w.getB());
		if( newhuman.getNum() % 2 != 0){//产生的是男人，放到男人种群
			manPop.add(newhuman);
		}else{                         //产生的是女人，放到女人种群
			womanPop.add(newhuman);
		}
		newhuman = new human(m.getB() + w.getA());
		if( newhuman.getNum() % 2 != 0){//产生的是男人，放到男人种群
			manPop.add(newhuman);
		}else{                         //产生的是女人，放到女人种群
			womanPop.add(newhuman);
		}
		newhuman = new human(m.getB() + w.getB());
		if( newhuman.getNum() % 2 == 0){//产生的是男人，放到男人种群
			manPop.add(newhuman);
		}else{                         //产生的是女人，放到女人种群
			womanPop.add(newhuman);
		}

	}
	
	//染色体分裂,男人分裂为X Y，女人分裂为 X1 X2
	private human split(human h){
		//男人
		if(h.getNum() % 2 != 0){
			h.setA(h.getNum()/2);
			h.setB(h.getNum() - (h.getNum()/2));
		}else{//女人
			int temp = h.getNum()/2;
			if(temp % 2 != 0){
				temp = temp + 1;
			}
			h.setA(temp);
			h.setB(h.getNum() - temp);
		}
		//染色体变异(基因突变)
		h.setA(Mutation(h.getA()));
		h.setB(Mutation(h.getB()));
		h.setDeadStatus(1);
		return h;
	}
	
	//变异(Mutation)：在繁殖过程，新产生的染色体中的基因会以一定的概率出错，称为变异。变异发生的概率记为Pm
	private int Mutation(int a){
		if(Math.random()<Pm){ //变异有一定概率发生
			return a = a + 2;
		}else{
			return a;
		}
	}
	
	//适应度函数 ( Fitness Function ) 适者生存，将不适应的个体淘汰掉
	private List<human> Fitness(List<human> pop){
		//新的种群
		List<human> newPop = new ArrayList<human>();
		pop = StayMax(pop);
		for(human h:pop){
			if(h.getDeadStatus() == 0){
				newPop.add(h);
			}
		}
		return newPop;
	}
	
	//淘汰算法(只要num最大的)
	private List<human> StayMax(List<human> pop){
		//只要最大num的
		int max = pop.get(0).getNum();
		int maxId = 0;
		for(int i = 0; i < pop.size();i++){
			human h = pop.get(i);
			if(h.getDeadStatus() == 0&&h.getNum() > max){
				max = h.getNum();
				maxId = i;
			}
			pop.get(i).setDeadStatus(1);
		}
		pop.get(maxId).setDeadStatus(0);  //最大的留下
		return pop;
	}
	
	//去掉最小的，其他留下。
	private List<human> RemoveMin(List<human> pop){
		//去掉
		int min = pop.get(0).getNum();
		int minId = 0;
		for(int i = 0; i < pop.size();i++){
			human h = pop.get(i);
			if(h.getDeadStatus() == 0&&h.getNum() < min){
				min = h.getNum();
				minId = i;
			}
		}
		pop.get(minId).setDeadStatus(1);  //最小的被淘汰
		return pop;
	}
	
	//
	public Boolean  check(List<human> pop){
		for(human h:pop){
			if(h.getNum() >= score){
				return true;
			}
			
		}
		return false;
	}
	
	public void Print(){
		for(human h:manPop){
			if(h.getDeadStatus() == 0){
				System.out.println(h.getNum());
			}
		}
		for(human h:womanPop){
			if(h.getDeadStatus() == 0){
				System.out.println(h.getNum());
			}
		}
	}
	
	public static void main(String[] args) {
		GA ga = new GA(new human(1),new human(2));
		for(int i = 1;i < 1000000;i++){
			if(ga.Population()){
				System.out.println("第"+i+"代满足条件");
				ga.Print();
				break;
			}
				
		}	
	}
}

//一个人有两条性染色体,X Y 或者 X X
class human{
	private int num;
	private int a;
	private int b;
	private int deadStatus = 0; //当为0时，表示个体死亡，被淘汰.
	public int getDeadStatus() {
		return deadStatus;
	}

	public void setDeadStatus(int deadStatus) {
		this.deadStatus = deadStatus;
	}

	public human(int num){
		this.num = num;
	}

	public int getNum() {
		return num;
	}
	public void setNum(int num) {
		this.num = num;
	}
	public int getA() {
		return a;
	}
	public void setA(int a) {
		this.a = a;
	}
	public int getB() {
		return b;
	}
	public void setB(int b) {
		this.b = b;
	}

}
